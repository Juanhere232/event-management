// <auto-generated />
using EventManager.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventManager.Infra.Data.Migrations
{
    [DbContext(typeof(EventManagementContext))]
    [Migration("20210227023318_CreatedPersonAssociations")]
    partial class CreatedPersonAssociations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventManagement.Domain.Entities.CoffeePlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("CoffeePlaces");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.EventRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("EventRooms");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.PersonCoffeePlaceAssociation", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("PersonId");

                    b.Property<long>("CoffeePlaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("CoffeePlaceId");

                    b.HasKey("PersonId", "CoffeePlaceId");

                    b.HasIndex("CoffeePlaceId");

                    b.ToTable("PersonCoffeePlace");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.PersonEventRoomAssociation", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("PersonId");

                    b.Property<long>("EventRoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("EventRoomId");

                    b.HasKey("PersonId", "EventRoomId");

                    b.HasIndex("EventRoomId");

                    b.ToTable("PersonEventRoom");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.PersonCoffeePlaceAssociation", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.CoffeePlace", "CoffeePlace")
                        .WithMany("PersonCoffeePlaceAssociations")
                        .HasForeignKey("CoffeePlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Person", "Person")
                        .WithMany("PersonCoffeePlaceAssociations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeePlace");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.PersonEventRoomAssociation", b =>
                {
                    b.HasOne("EventManagement.Domain.Entities.EventRoom", "EventRoom")
                        .WithMany("PersonEventRoomAssociations")
                        .HasForeignKey("EventRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagement.Domain.Entities.Person", "Person")
                        .WithMany("PersonEventRoomAssociations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRoom");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.CoffeePlace", b =>
                {
                    b.Navigation("PersonCoffeePlaceAssociations");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.EventRoom", b =>
                {
                    b.Navigation("PersonEventRoomAssociations");
                });

            modelBuilder.Entity("EventManagement.Domain.Entities.Person", b =>
                {
                    b.Navigation("PersonCoffeePlaceAssociations");

                    b.Navigation("PersonEventRoomAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
